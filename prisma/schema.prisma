// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String? 
  name          String?
  image         String?
  onboarded  Boolean @default(false)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts            Account[]
  sessions            Session[]
  travelPreferences   TravelPreferences?
  emailPreferences    EmailPreferences?
  schedulingPreferences SchedulingPreferences?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TravelPreferences {
  id                  String   @id @default(cuid())
  userId              String   @unique
  preferredClass      String[]  // 'economy', 'premium', 'business', 'firstclass'
  seatPreference      String?  // 'aisle', 'window', 'exitrow', 'front'
  alwaysCheckBags     Boolean  @default(false)
  airlineLoyalty      String[]
  hotelLoyalty        String[]
  mustHaveAmenities   String[]
  roomPreference      String?  // 'highfloor', 'kingbed', 'quietarea'
  rentalCarCompany    String?  // 'enterprise', 'hertz', 'avis', 'none'
  ridesharePreference String?  // 'uber-black', 'uber-x', 'lyft', 'taxi'
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailPreferences {
  id                String   @id @default(cuid())
  userId            String   @unique
  prioritySenders   String[]
  autoResponseRules Json?
  draftingStyle     String?  // 'professional', 'casual', 'technical'
  workingHoursStart String?  // '09:00'
  workingHoursEnd   String?  // '17:00'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SchedulingPreferences {
  id                  String    @id @default(cuid())
  userId              String    @unique
  workHoursStart      String?   // '09:00'
  workHoursEnd        String?   // '17:00'
  timeZone            String?   // 'America/New_York'
  focusTimeBlocks     Boolean   @default(true)
  focusTimeHours      String    @default("02:00")
  meetingBuffer       Int?      @default(15)
  NoMeetingsBefore    String?   @default("09:00")
  NoMeetingsAfter     String?   @default("06:00")
  autoDeclineNoAgenda Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}